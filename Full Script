getgenv().Aimbot = {
    Status = true,
    Keybind = 'C',
    Hitpart = 'HumanoidRootPart',
    ['Prediction'] = {
        X = 0.165,
        Y = 0.1,
    },
}

if getgenv().AimbotRan then
    return
else
    getgenv().AimbotRan = true
end

local RunService = game:GetService('RunService')
local Workspace = game:GetService('Workspace')
local Players = game:GetService('Players')
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

local Player = nil -- Target player
local highlighting = false -- To track highlight state
local speedBoostActive = false -- Track speed boost state
local boostMagnitude = 50 -- Speed magnitude when Q is pressed
local maxBoostMagnitude = 100 -- Magnitude when P is held down

-- Function to create highlight
local function createHighlight(character)
    if character and character:FindFirstChild("Humanoid") then
        local highlight = character:FindFirstChild("Highlight")
        if not highlight then
            highlight = Instance.new("Highlight")
            highlight.Parent = character
            highlight.FillColor = Color3.fromRGB(255, 0, 0) -- Red highlight
            highlight.OutlineColor = Color3.fromRGB(255, 0, 0) -- Red outline
        end
    end
end

-- Function to remove highlight
local function removeHighlight(character)
    local highlight = character:FindFirstChild("Highlight")
    if highlight then
        highlight:Destroy()
    end
end

-- Function to toggle highlights for all players except local player
local function toggleHighlights()
    highlighting = not highlighting -- Toggle highlight state

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then -- Skip local player
            if player.Character then
                if highlighting then
                    createHighlight(player.Character) -- Create new highlight
                else
                    removeHighlight(player.Character) -- Remove highlight if it exists
                end
            end
        end
    end
end

-- Get the closest player
local function GetClosestPlayer()
    local ClosestDistance, ClosestPlayer = 100000, nil
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild('HumanoidRootPart') then
            local Root, Visible = Camera:WorldToScreenPoint(player.Character.HumanoidRootPart.Position)
            if not Visible then
                continue
            end
            local Distance = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(Root.X, Root.Y)).Magnitude
            if Distance < ClosestDistance then
                ClosestPlayer = player
                ClosestDistance = Distance
            end
        end
    end
    return ClosestPlayer
end

Mouse.KeyDown:Connect(function(key)
    if key == Aimbot.Keybind:lower() then
        Player = not Player and GetClosestPlayer() or nil
    elseif key == 't' then
        toggleHighlights() -- Toggle highlights with T
    elseif key == 'q' then
        speedBoostActive = not speedBoostActive -- Toggle speed boost
    elseif key == 'p' then
        if speedBoostActive then
            boostMagnitude = maxBoostMagnitude -- Set maximum speed
        end
    elseif key == 'z' then
        -- Teleport to nearest player
        local closestPlayer = GetClosestPlayer()
        if closestPlayer and closestPlayer.Character and closestPlayer.Character:FindFirstChild("HumanoidRootPart") then
            LocalPlayer.Character.HumanoidRootPart.CFrame = closestPlayer.Character.HumanoidRootPart.CFrame
        end
    end
end)

Mouse.KeyUp:Connect(function(key)
    if key == 'p' then
        if speedBoostActive then
            boostMagnitude = 50 -- Reset to default boost speed
        end
    end
end)

RunService.RenderStepped:Connect(function()
    if speedBoostActive then
        local character = LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            local rootPart = character.HumanoidRootPart
            local direction = Vector3.new()

            -- Determine direction based on WASD input
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                direction = direction + Camera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                direction = direction - Camera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                direction = direction - Camera.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                direction = direction + Camera.CFrame.RightVector
            end

            -- Apply movement only if there's direction
            if direction.Magnitude > 0 then
                direction = direction.Unit * boostMagnitude
                rootPart.Velocity = direction -- Set velocity directly
            end
        end
    end

    -- Highlight handling based on player health
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            local humanoid = player.Character.Humanoid
            if humanoid.Health <= 5 then
                removeHighlight(player.Character) -- Remove highlight if health is 0-5
            elseif highlighting and player ~= LocalPlayer then
                createHighlight(player.Character) -- Create highlight if health is above 5 and highlighting is active
            end
        end
    end

    if not Player then
        return
    end
    if not Aimbot.Status then
        return
    end
    local Hitpart = Player.Character:FindFirstChild(Aimbot.Hitpart)
    if not Hitpart then
        return
    end
    Camera.CFrame = CFrame.new(Camera.CFrame.Position, Hitpart.Position + Hitpart.Velocity * Vector3.new(Aimbot.Prediction.X, Aimbot.Prediction.Y, Aimbot.Prediction.X))
end)

-- Function to handle newly added players
local function onPlayerAdded(player)
    player.CharacterAdded:Connect(function(character)
        if highlighting and player ~= LocalPlayer then
            createHighlight(character) -- Highlight new player's character if highlighting is enabled
        end
        character:WaitForChild("Humanoid").HealthChanged:Connect(function(health)
            if health <= 5 then
                removeHighlight(character) -- Remove highlight on low health
            elseif highlighting then
                createHighlight(character) -- Reapply highlight if health is above 5 and highlighting is active
            end
        end)
    end)
end

-- Connect to PlayerAdded event
Players.PlayerAdded:Connect(onPlayerAdded)

-- Highlight existing players at the start if highlighting is enabled
for _, player in pairs(Players:GetPlayers()) do
    onPlayerAdded(player) -- Apply highlight for already existing players
end

-- Reset highlights every 30 seconds
while true do
    wait(30)
    if highlighting then
        for _, player in pairs(Players:GetPlayers()) do
            if player.Character then
                createHighlight(player.Character)
            end
        end
    end
end
